<div class="flex h-screen bg-gradient-to-br from-gray-50 to-blue-50">

    <%- include('../partials/sidebar') %>



    <div class="flex-1 ml-64 flex flex-col">

        <!-- Enhanced Chat header -->

        <div class="bg-white shadow-sm p-4 flex items-center justify-between border-b">

            <div class="flex items-center space-x-4">

                <% if(chat.type === 'direct') { %>

                    <% const otherUser = chat.participants.find(p => p._id.toString() !== user._id.toString()) %>

                    <div class="relative">

                        <img src="<%= otherUser.avatar %>" alt="Avatar" class="w-12 h-12 rounded-full border-2 border-blue-500">

                        <span class="absolute bottom-0 right-0 w-3 h-3 rounded-full <%= otherUser.status === 'online' ? 'bg-green-400' : 'bg-gray-400' %> border-2 border-white"></span>

                    </div>

                    <div>

                        <h3 class="font-semibold text-lg text-gray-800"><%= otherUser.username %></h3>

                        <p class="text-sm text-gray-500">

                            <%= otherUser.status === 'online' ? 'Online' : 'Last seen ' + moment(otherUser.lastSeen).fromNow() %>

                        </p>

                    </div>

                <% } else { %>

                    <div class="w-12 h-12 rounded-full bg-gradient-to-br from-blue-500 to-blue-600 flex items-center justify-center text-white font-bold text-xl">

                        <%= chat.name[0] %>

                    </div>

                    <div>

                        <h3 class="font-semibold text-lg text-gray-800"><%= chat.name %></h3>

                        <p class="text-sm text-gray-500"><%= chat.participants.length %> members</p>

                    </div>

                <% } %>

            </div>



            <div class="flex items-center space-x-3">

                <button class="p-2 hover:bg-gray-100 rounded-full transition-colors duration-200" title="Attach file">

                    <svg class="w-6 h-6 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">

                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.172 7l-6.586 6.586a2 2 0 102.828 2.828l6.414-6.586a4 4 0 00-5.656-5.656l-6.415 6.585a6 6 0 108.486 8.486L20.5 13"></path>

                    </svg>

                </button>

                <button class="p-2 hover:bg-gray-100 rounded-full transition-colors duration-200" title="Search messages">

                    <svg class="w-6 h-6 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">

                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>

                    </svg>

                </button>

                <button class="p-2 hover:bg-gray-100 rounded-full transition-colors duration-200" title="More options">

                    <svg class="w-6 h-6 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">

                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 5v.01M12 12v.01M12 19v.01M12 6a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2z"></path>

                    </svg>

                </button>

            </div>

        </div>



        <!-- Enhanced Chat messages -->

        <div class="flex-1 overflow-y-auto p-4 space-y-4" id="messages">

            <% messages.forEach(message => { %>

                <div class="flex <%= message.sender._id.toString() === user._id.toString() ? 'justify-end' : 'justify-start' %> message-item">

                    <div class="flex items-end max-w-[70%] group">

                        <% if(message.sender._id.toString() !== user._id.toString()) { %>

                            <img src="<%= message.sender.avatar %>" alt="Avatar" class="w-8 h-8 rounded-full mr-2 mb-2">

                        <% } %>

                        

                        <div class="<%= message.sender._id.toString() === user._id.toString() ? 'bg-blue-500 text-white' : 'bg-white' %> rounded-2xl p-3 shadow-sm hover:shadow-md transition-shadow duration-200">

                            <% if(message.attachments && message.attachments.length > 0) { %>

                                <% message.attachments.forEach(attachment => { %>

                                    <% if(attachment.mimetype.startsWith('image/')) { %>

                                        <img src="<%= attachment.path %>" alt="Attached image" class="max-w-sm rounded-lg mb-2 hover:opacity-90 transition-opacity cursor-pointer">

                                    <% } else { %>

                                        <div class="flex items-center space-x-2 mb-2 p-2 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors">

                                            <svg class="w-5 h-5 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">

                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.172 7l-6.586 6.586a2 2 0 102.828 2.828l6.414-6.586a4 4 0 00-5.656-5.656l-6.415 6.585a6 6 0 108.486 8.486L20.5 13"></path>

                                            </svg>

                                            <a href="<%= attachment.path %>" target="_blank" class="text-blue-500 hover:text-blue-600 transition-colors">

                                                <%= attachment.filename %>

                                            </a>

                                        </div>

                                    <% } %>

                                <% }); %>

                            <% } %>



                            <p class="<%= message.sender._id.toString() === user._id.toString() ? 'text-white' : 'text-gray-800' %>">

                                <%= message.content %>

                            </p>

                            

                            <div class="mt-1 flex items-center justify-end space-x-2">

                                <span class="text-xs <%= message.sender._id.toString() === user._id.toString() ? 'text-blue-100' : 'text-gray-500' %>">

                                    <%= moment(message.createdAt).format('h:mm A') %>

                                </span>

                                <% if(message.sender._id.toString() === user._id.toString()) { %>

                                    <% if(message.readBy.length > 0) { %>

                                        <svg class="w-4 h-4 text-blue-200" fill="none" stroke="currentColor" viewBox="0 0 24 24">

                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>

                                        </svg>

                                    <% } %>

                                <% } %>

                            </div>

                        </div>

                    </div>

                </div>

            <% }); %>

        </div>



        <!-- Enhanced Message input -->

        <div class="bg-white border-t p-4">

            <form id="chat-form" class="flex items-center space-x-4">

                <div class="relative flex-1">

                    <input type="text" id="msg" 

                        class="w-full border-2 border-gray-200 rounded-full py-3 px-6 focus:outline-none focus:border-blue-500 transition-colors"

                        placeholder="Type a message...">

                    <button type="button" class="absolute right-14 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600">

                        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">

                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.828 14.828a4 4 0 01-5.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>

                        </svg>

                    </button>

                </div>

                <button type="submit" 

                    class="bg-blue-500 p-3 rounded-full hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition-colors">

                    <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">

                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8"></path>

                    </svg>

                </button>

            </form>

        </div>

    </div>

</div>



<!-- Add this modal for chat settings -->
<div id="chat-settings-modal" class="hidden fixed inset-0 bg-black bg-opacity-50 z-50">
    <div class="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 bg-white rounded-lg p-6 w-96">
        <h3 class="text-xl font-bold mb-4">Chat Settings</h3>
        <div class="space-y-4">
            <div class="flex items-center justify-between">
                <span>Notifications</span>
                <label class="switch">
                    <input type="checkbox" checked>
                    <span class="slider round"></span>
                </label>
            </div>
            <div>
                <label class="block text-sm font-medium text-gray-700">Theme</label>
                <select class="mt-1 block w-full rounded-md border-gray-300 shadow-sm">
                    <option>Default</option>
                    <option>Dark</option>
                    <option>Light</option>
                </select>
            </div>
            <% if(chat.type === 'group' && chat.admin._id.toString() === user._id.toString()) { %>
                <div>
                    <button class="w-full bg-red-500 text-white py-2 rounded-md hover:bg-red-600">
                        Delete Chat
                    </button>
                </div>
            <% } %>
        </div>
        <button class="absolute top-4 right-4 text-gray-500 hover:text-gray-700" onclick="toggleModal()">
            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
            </svg>
        </button>
    </div>
</div>

<!-- Add this typing indicator -->
<div id="typing-indicator" class="hidden px-4 py-2 text-sm text-gray-500">
    <div class="flex items-center space-x-2">
        <div class="typing-dots">
            <span></span>
            <span></span>
            <span></span>
        </div>
        <span>Someone is typing...</span>
    </div>
</div>

<!-- Add these styles to your CSS -->
<style>
.typing-dots {
    display: flex;
    gap: 4px;
}

.typing-dots span {
    width: 4px;
    height: 4px;
    background-color: #6B7280;
    border-radius: 50%;
    animation: typing 1s infinite ease-in-out;
}

.typing-dots span:nth-child(1) { animation-delay: 0.1s; }
.typing-dots span:nth-child(2) { animation-delay: 0.2s; }
.typing-dots span:nth-child(3) { animation-delay: 0.3s; }

@keyframes typing {
    0%, 100% { transform: translateY(0); }
    50% { transform: translateY(-4px); }
}

.switch {
    position: relative;
    display: inline-block;
    width: 50px;
    height: 24px;
}

.switch input {
    opacity: 0;
    width: 0;
    height: 0;
}

.slider {
    position: absolute;
    cursor: pointer;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: #ccc;
    transition: .4s;
    border-radius: 34px;
}

.slider:before {
    position: absolute;
    content: "";
    height: 16px;
    width: 16px;
    left: 4px;
    bottom: 4px;
    background-color: white;
    transition: .4s;
    border-radius: 50%;
}

input:checked + .slider {
    background-color: #3B82F6;
}

input:checked + .slider:before {
    transform: translateX(26px);
}
</style>

<!-- Add this script -->
<script>
function toggleModal() {
    const modal = document.getElementById('chat-settings-modal');
    modal.classList.toggle('hidden');
}

// Typing indicator
let typingTimeout;
const input = document.getElementById('msg');
const typingIndicator = document.getElementById('typing-indicator');

input.addEventListener('input', () => {
    socket.emit('typing', { room: '<%= chat._id %>', user: '<%= user.username %>' });
    
    clearTimeout(typingTimeout);
    typingTimeout = setTimeout(() => {
        socket.emit('stopTyping', { room: '<%= chat._id %>' });
    }, 1000);
});

socket.on('userTyping', (username) => {
    typingIndicator.querySelector('span').textContent = `${username} is typing...`;
    typingIndicator.classList.remove('hidden');
});

socket.on('userStoppedTyping', () => {
    typingIndicator.classList.add('hidden');
});

// Message reactions
document.querySelectorAll('.message-bubble').forEach(message => {
    message.addEventListener('dblclick', () => {
        const reaction = '❤️';
        const messageId = message.dataset.messageId;
        socket.emit('messageReaction', { messageId, reaction });
    });
});

// Read receipts
const markMessageAsRead = (messageId) => {
    socket.emit('messageRead', { messageId });
};

// Intersection Observer for read receipts
const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
        if (entry.isIntersecting) {
            const messageId = entry.target.dataset.messageId;
            markMessageAsRead(messageId);
        }
    });
}, { threshold: 1.0 });

document.querySelectorAll('.message-bubble').forEach(message => {
    observer.observe(message);
});
</script>
